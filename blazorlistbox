<select multiple class="list-group form-select" style="height: 400px; overflow-y: auto;" @bind="selectedAvailableEntities">
    @foreach (var entity in filteredAvailableEntities)
    {
        <option value="@entity">@entity.EntityName</option>
    }
</select>



private void HandleSelect(PriorityEntity entity)
{
    if (Keyboard.Modifiers == ModifierKeys.Control)
    {
        if (selectedAvailableEntities.Contains(entity))
            selectedAvailableEntities.Remove(entity);
        else
            selectedAvailableEntities.Add(entity);
    }
    else
    {
        selectedAvailableEntities.Clear();
        selectedAvailableEntities.Add(entity);
    }
}


----------------------------------------


@page "/priorityentitylist"
@inject IPriorityEntityService priorityEntityService

<div class="card">
    <div class="card-header">Priority Entity List</div>
    <div class="form-group">
        <label for="searchInput">Search:</label>
        <input id="searchInput" type="text" class="form-control" @bind-value="@searchTerm" @bind-value:event="oninput" />
    </div>
    <div class="row">
        <div class="col-sm-6">
            <div class="card">
                <div class="card-header">Available Entities</div>
                <div class="select-list">
                    <div class="list-group">
                        @foreach (var entity in filteredAvailableEntities)
                        {
                            <button type="button" class="list-group-item @((selectedAvailableEntities.Contains(entity)) ? "active" : "")" @onclick="() => HandleSelect(entity)">
                                @entity.EntityName
                            </button>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="col-sm-6">
            <div class="card">
                <div class="card-header">Selected Entities</div>
                <div class="selected-list">
                    <div class="list-group">
                        @foreach (var entity in selectedAvailableEntities)
                        {
                            <button type="button" class="list-group-item selected-list-item" @onclick="() => HandleUnselect(entity)">
                                @entity.EntityName
                            </button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="form-group">
        <div class="btn-group">
            <button type="button" class="btn btn-primary" @onclick="Save">Save</button>
            <button type="button" class="btn btn-secondary" @onclick="SelectAll">Select All</button>
        </div>
        <button type="button" class="btn btn-danger" @onclick="RemoveAllSelected">Remove All Selected</button>
    </div>
</div>

@code {
    private List<PriorityEntity> availableEntities = new List<PriorityEntity>();
    private List<PriorityEntity> selectedAvailableEntities = new List<PriorityEntity>();
    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        availableEntities = await priorityEntityService.GetAllAsync();
    }

    private List<PriorityEntity> filteredAvailableEntities
    {
        get
        {
            if (string.IsNullOrWhiteSpace(searchTerm))
                return availableEntities;

            return availableEntities
                .Where(e => e.EntityName.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }
    }

    private void HandleSelect(PriorityEntity entity)
    {
        if (!selectedAvailableEntities.Contains(entity))
            selectedAvailableEntities.Add(entity);
    }

    private void HandleUnselect(PriorityEntity entity)
    {
        if (selectedAvailableEntities.Contains(entity))
            selectedAvailableEntities.Remove(entity);
    }

    private void SelectAll()
    {
        selectedAvailableEntities = new List<PriorityEntity>(filteredAvailableEntities);
    }

    private void RemoveAllSelected()
    {
        selectedAvailableEntities.Clear();
    }

    private async Task Save()
    {
        if (selectedAvailableEntities.Count > 0)
        {
            await priorityEntityService.SaveAsync(selectedAvailableEntities);
            selectedAvailableEntities.Clear();
            await LoadData();
        }
    }
}

------------------------------------------------------


@page "/selection"
@inject IPriorityEntityService PriorityEntityService

<h3>Selection Page</h3>

<div class="row">
    <div class="col-5">
        <h4>Available Entities</h4>
        <select multiple class="form-control" size="10" @bind="availableEntities" />
    </div>
    <div class="col-2">
        <button class="btn btn-secondary" @onclick="HandleSelect">
            <i class="bi bi-chevron-right"></i>
        </button>
        <button class="btn btn-secondary" @onclick="HandleUnselect">
            <i class="bi bi-chevron-left"></i>
        </button>
    </div>
    <div class="col-5">
        <h4>Selected Entities</h4>
        <select multiple class="form-control" size="10" @bind="selectedEntities" />
    </div>
</div>

<br />
<br />

<button class="btn btn-primary" @onclick="HandleSave">Save</button>

@code {
    private IEnumerable<PriorityEntity> availableEntities;
    private List<PriorityEntity> selectedEntities = new List<PriorityEntity>();

    protected override async Task OnInitializedAsync()
    {
        availableEntities = await PriorityEntityService.GetAllAsync();
    }

    private void HandleSelect()
    {
        var entity = availableEntities.FirstOrDefault(e => e.IsSelected);
        if (entity != null)
        {
            selectedEntities.Add(entity);
            availableEntities = availableEntities.Where(e => e != entity);
        }
    }

    private void HandleUnselect()
    {
        var entity = selectedEntities.FirstOrDefault(e => e.IsSelected);
        if (entity != null)
        {
            availableEntities = availableEntities.Append(entity);
            selectedEntities = selectedEntities.Where(e => e != entity).ToList();
        }
    }

    private async Task HandleSave()
    {
        // TODO: Save selected entities to the database
    }
}
