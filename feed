var result = dbContext.YourTable
    .Select(rr => new
    {
        ConcatenatedValue = (
            (rr.FacilityId != null && f.AssetId != null)
                ? (f.AssetId ?? string.Empty)
                : (rr.IssueId != null && i.AssetId != null)
                    ? (i.AssetId ?? string.Empty)
                    : string.Empty
            ) +
            '/' +
            (rr.TransCategory == "EN"
                ? (ed => ed.Comments != null
                    ? (ed.Comments.Length > 35 ? ed.Comments.Substring(0, 35) : ed.Comments)
                    : string.Empty,
                    ed => dbContext.EntityTransaction
                        .Join(dbContext.CashTransaction,
                            ed => ed.EntTransId,
                            cd => cd.EntTransId,
                            (ed, cd) => new { ed, cd })
                        .Where(joinResult => joinResult.cd.CashTransId == rr.TransId)
                        .Select(joinResult => joinResult.ed)
                        .FirstOrDefault())
                : string.Empty
            ) +
            '/' +
            (rr.IssuerName ?? string.Empty)
    })
    .ToList();

-------------------------------------


var result = from tellerDiff in dbContext.TellerDiff
             where Math.Abs(tellerDiff.CollectAmount - tellerDiff.WireAmount) <= StellerDiffAllow
             select new
             {
                 SequenceId = tellerDiff.SequenceId,
                 CashTransType = Math.Abs(tellerDiff.CollectAmount - tellerDiff.WireAmount) <= StellerDiffAllow ? "P" : "R",
                 WireAmount = Math.Abs(tellerDiff.CollectAmount - tellerDiff.WireAmount),
                 DdaNumber = tellerDiff.DdaNumber,
                 SourceRef = tellerDiff.SourceRef,
                 IssuerName = tellerDiff.IssuerName,
                 SettleDate = DateTime.Now.ToString("MM/dd/yyyy"),
                 Currency = "USD",
                 CashTransType = tellerDiff.CollectAmount > tellerDiff.WireAmount ? "R" : "D",
                 TransAccount = tellerDiff.PrincProceedsAmt,
                 EntityId = tellerDiff.EntityId
             };


------------------------------

var result = from r in dbContext.Result
             where r.DataSource == "US" && r.Currency == "USD"
             group r by new { r.SequenceId, r.DdaNumber } into grouped
             let sum1 = grouped.Sum(g =>
                 (decimal) (g.PrincProceedsAmt ?? 0) * (g.CashTransType == "R" ? 1 : -1) +
                 (decimal) (g.IntProceedsAmt ?? 0) * (g.CashTransType == "R" ? 1 : -1)
             )
             let sum2 = grouped.Sum(g => g.WireAmount ?? 0)
             where sum1 != sum2
             select new
             {
                 grouped.Key.SequenceId,
                 grouped.Key.DdaNumber,
                 SourceRef = grouped.FirstOrDefault()?.SourceRef,
                 IssuerName = grouped.FirstOrDefault()?.IssuerName,
                 CollectAmount = grouped.FirstOrDefault()?.CollectAmount,
                 WireAmount = grouped.FirstOrDefault()?.WireAmount,
                 EntityId = grouped.FirstOrDefault()?.EntityId
             };

----------------------------------------------


var result = from rr in resultTable
             join aa in accountTable on new { rr.TransAccount, rr.Entity.ID } equals new { TransAccount = aa.AccountNum, aa.EntityID }
                 into aaGroup
             from aa in aaGroup.DefaultIfEmpty()
             join ab in accountTable on new { rr.TransAccount, rr.Entity.ID } equals new { TransAccount = ab.AccountNum2, ab.EntityID }
                 into abGroup
             from ab in abGroup.DefaultIfEmpty()
             where rr.TransID != null &&
                   dbContext.SSGlobalPlusAutoFeed_UsedTransIDList.Any(t => t.SequenceID == rr.SequenceID)
             group rr by rr.SequenceID into grouped
             where grouped.All(gr =>
                grouped.Min(caseValue =>
                    (aa?.AccountID != null && ab?.AccountID != null) ? 
                        ((aa.ActiveAccount ?? 0) == 0 || (ab.ActiveAccount ?? 0) == 0) ? 0 : 1 :
                    (aa?.AccountID != null) ? (aa.ActiveAccount ?? 0) :
                    (ab?.AccountID != null) ? (ab.ActiveAccount ?? 0) :
                    0) == 0);



---------------------------------

var result = yourData
    .Where(item => (item.aa.account_id != null && item.ab.account_id != null) &&
                   (
                       (item.aa.account_id != null && item.ab.account_id != null) ?
                           (
                               (item.aa.active_account ?? 0) == 0 || (item.ab.active_account ?? 0) == 0 ? 0 : 1
                           ) :
                           (
                               item.aa.account_id != null ? (item.aa.active_account ?? 0) :
                               item.ab.account_id != null ? (item.ab.active_account ?? 0) :
                               0
                           )
                   ) == 0);



-------------------------

var result = from rr in resultTable
             join aa in accountTable on new { rr.TransAccount, rr.Entity.ID } equals new { TransAccount = aa.AccountNum, aa.EntityID } into aaGroup
             from aa in aaGroup.DefaultIfEmpty()
             join ab in accountTable on new { rr.TransAccount, rr.Entity.ID } equals new { TransAccount = ab.AccountNum2, ab.EntityID } into abGroup
             from ab in abGroup.DefaultIfEmpty()
             where rr.TransID != null &&
                   dbContext.SSGlobalPlusAutoFeed_UsedTransIDList.Any(t => t.SequenceID == rr.SequenceID) &&
                   ((aa == null || aa.ActiveAccount == null || aa.ActiveAccount == 0) &&
                    (ab == null || ab.ActiveAccount == null || ab.ActiveAccount == 0))
             let aaActiveAccount = aa?.ActiveAccount ?? 0
             let abActiveAccount = ab?.ActiveAccount ?? 0
             group rr by rr.SequenceID into grouped
             where grouped.All(gr =>
                grouped.Min(caseValue =>
                    (caseValue.aa != null && caseValue.ab != null) ?
                        ((caseValue.aaActiveAccount == 0 || caseValue.abActiveAccount == 0) ? 0 : 1) :
                    (caseValue.aa != null) ? (caseValue.aaActiveAccount == 0 ? 0 : 1) :
                    (caseValue.ab != null) ? (caseValue.abActiveAccount == 0 ? 0 : 1) :
                    0) == 0)
             select new
             {
                 SequenceID = grouped.Key
             };
