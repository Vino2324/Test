var result = from rr in resultTable
             join aa in accountTable on new { rr.TransAccount, rr.Entity.ID } equals new { TransAccount = aa.AccountNum, aa.EntityID }
                 into aaGroup
             from aa in aaGroup.DefaultIfEmpty()
             join ab in accountTable on new { rr.TransAccount, rr.Entity.ID } equals new { TransAccount = ab.AccountNum2, ab.EntityID }
                 into abGroup
             from ab in abGroup.DefaultIfEmpty()
             where rr.TransID != null &&
                   dbContext.SSGlobalPlusAutoFeed_UsedTransIDList.Any(t => t.SequenceID == rr.SequenceID)
             group rr by rr.SequenceID into grouped
             where grouped.All(gr =>
                grouped.Min(caseValue =>
                    (aa?.AccountID != null && ab?.AccountID != null) ? 
                        ((aa.ActiveAccount ?? 0) == 0 || (ab.ActiveAccount ?? 0) == 0) ? 0 : 1 :
                    (aa?.AccountID != null) ? (aa.ActiveAccount ?? 0) :
                    (ab?.AccountID != null) ? (ab.ActiveAccount ?? 0) :
                    0) == 0);
